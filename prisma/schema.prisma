generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                      String         @id @default(uuid())
  username                                String         @unique
  password                                String
  role                                    UserRole
  email                                   String?        @unique
  gender                                  Boolean?
  DateOfBirth                             DateTime?
  phoneNumber                             String?
  createdAt                               DateTime       @default(now())
  updatedAt                               DateTime       @updatedAt
  createdById                             String?
  avatar                                  String?
  emailVerified                           Boolean        @default(false)
  isActive                                Boolean        @default(true)
  lastLoginAt                             DateTime?
  fieldDisplays                           FieldDisplay[]
  scoredMatches                           Match[]        @relation("ScoredBy")
  matchReferees                           MatchReferee[]
  tournaments                             Tournament[]
  createdBy                               User?          @relation("CreatedUsers", fields: [createdById], references: [id])
  createdUsers                            User[]         @relation("CreatedUsers")
  fieldReferees                           FieldReferee[]

  @@index([createdById])
}

model Tournament {
  id             String        @id @default(uuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  adminId        String
  numberOfFields Int           @default(1)
  fields         Field[]
  scoreConfigs   ScoreConfig[]
  stages         Stage[]
  teams          Team[]
  teamStats      TeamStats[]
  admin          User          @relation(fields: [adminId], references: [id])

  @@index([adminId])
}

model Stage {
  id               String      @id @default(uuid())
  name             String
  type             StageType
  startDate        DateTime
  endDate          DateTime
  tournamentId     String
  teamsPerAlliance Int         @default(2)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  status           StageStatus @default(ACTIVE)
  matches          Match[]
  tournament       Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  teams            Team[]      @relation("StageTeams")
  teamStats        TeamStats[]

  @@index([tournamentId])
}

model Match {
  id              String          @id @default(uuid())
  matchNumber     Int
  roundNumber     Int?
  status          MatchState      @default(PENDING)
  startTime       DateTime?
  scheduledTime   DateTime?
  endTime         DateTime?
  duration        Int?
  winningAlliance AllianceColor?
  stageId         String
  scoredById      String?
  roundType       MatchRoundType?
  scheduleId      String?
  fieldId         String?
  matchType       MatchType       @default(FULL)
  matchDuration   Int?
  updatedAt       DateTime        @updatedAt
  alliances       Alliance[]
  fieldDisplays   FieldDisplay[]  @relation("FieldDisplayCurrentMatch")
  field           Field?          @relation(fields: [fieldId], references: [id])
  scoredBy        User?           @relation("ScoredBy", fields: [scoredById], references: [id])
  stage           Stage           @relation(fields: [stageId], references: [id], onDelete: Cascade)
  referees        MatchReferee[]
  matchScores     MatchScore[]


  @@index([stageId])
  @@index([scoredById])
  @@index([scheduleId])
  @@index([fieldId])
  @@index([stageId, matchNumber])
  @@index([status, startTime])
}

model MatchReferee {
  id        String   @id @default(uuid())
  matchId   String
  userId    String
  role      UserRole
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([matchId, userId])
  @@index([matchId])
  @@index([userId])
}

model Alliance {
  id            String         @id @default(uuid())
  color         AllianceColor
  score         Int            @default(0)
  matchId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  autoScore     Int            @default(0)
  driveScore    Int            @default(0)
  match         Match          @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchScores   MatchScore[]
  teamAlliances TeamAlliance[]

  @@index([matchId])
}

model Team {
  id             String         @id @default(uuid())
  teamNumber     String         @unique
  name           String
  organization   String?
  avatar         String?
  description    String?
  teamLead       String?
  teamLeadId     String?
  teamMembers    Json?
  tournamentId   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  currentStageId String?
  currentStage   Stage?         @relation("StageTeams", fields: [currentStageId], references: [id])
  tournament     Tournament?    @relation(fields: [tournamentId], references: [id])
  teamAlliances  TeamAlliance[]
  teamStats      TeamStats[]

  @@index([tournamentId])
  @@index([currentStageId])
}

model TeamAlliance {
  id              String   @id @default(uuid())
  teamId          String
  allianceId      String
  stationPosition Int      @default(1)
  isSurrogate     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  alliance        Alliance @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, allianceId])
  @@index([teamId])
  @@index([allianceId])
}

model TeamStats {
  id                    String     @id @default(uuid())
  teamId                String
  tournamentId          String
  stageId               String?
  wins                  Int        @default(0)
  losses                Int        @default(0)
  ties                  Int        @default(0)
  pointsScored          Int        @default(0)
  pointsConceded        Int        @default(0)
  matchesPlayed         Int        @default(0)
  rankingPoints         Int        @default(0)
  opponentWinPercentage Float      @default(0)
  pointDifferential     Int        @default(0)
  rank                  Int?
  tiebreaker1           Float      @default(0)
  tiebreaker2           Float      @default(0)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  stage                 Stage?     @relation(fields: [stageId], references: [id])
  team                  Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tournament            Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([teamId, tournamentId])
  @@index([teamId])
  @@index([tournamentId])
  @@index([stageId])
  @@index([tournamentId, stageId])
}

model Field {
  id            String         @id @default(uuid())
  name          String
  number        Int            @db.SmallInt
  location      String?
  description   String?
  tournamentId  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tournament    Tournament     @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  fieldDisplay  FieldDisplay?
  matches       Match[]
  fieldReferees FieldReferee[]

  @@unique([tournamentId, number])
  @@index([tournamentId])
}

model FieldDisplay {
  id              String       @id @default(uuid())
  fieldId         String       @unique
  displayState    DisplayState @default(TEAM_LIST)
  currentMatchId  String?
  customMessage   String?
  lastUpdatedBy   String?
  autoAdvance     Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  currentMatch    Match?       @relation("FieldDisplayCurrentMatch", fields: [currentMatchId], references: [id])
  field           Field        @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  lastUpdatedUser User?        @relation(fields: [lastUpdatedBy], references: [id])

  @@index([fieldId])
  @@index([displayState])
  @@index([lastUpdatedBy])
}

model FieldReferee {
  id        String   @id @default(uuid())
  fieldId   String
  userId    String
  isHeadRef Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  field     Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([fieldId, userId])
  @@index([fieldId])
  @@index([userId])
  @@index([fieldId, isHeadRef])
  @@map("field_referees")
}

model ScoreConfig {
  id                String             @id @default(uuid())
  tournamentId      String?
  name              String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bonusConditions   BonusCondition[]
  penaltyConditions PenaltyCondition[]
  tournament        Tournament?         @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  scoreElements     ScoreElement[]

  @@index([tournamentId])
}

model ScoreElement {
  id            String       @id @default(uuid())
  scoreConfigId String
  name          String
  code          String
  description   String?
  pointsPerUnit Int
  category      String?
  elementType   ElementType
  displayOrder  Int
  icon          String?
  color         String?
  matchScores   MatchScore[]
  scoreConfig   ScoreConfig  @relation(fields: [scoreConfigId], references: [id], onDelete: Cascade)

  @@unique([scoreConfigId, code])
  @@index([scoreConfigId])
}

model BonusCondition {
  id            String      @id @default(uuid())
  scoreConfigId String
  name          String
  code          String
  description   String?
  bonusPoints   Int
  condition     Json
  displayOrder  Int
  scoreConfig   ScoreConfig @relation(fields: [scoreConfigId], references: [id], onDelete: Cascade)

  @@unique([scoreConfigId, code])
  @@index([scoreConfigId])
}

model PenaltyCondition {
  id            String      @id @default(uuid())
  scoreConfigId String
  name          String
  code          String
  description   String?
  penaltyPoints Int
  condition     Json
  displayOrder  Int
  scoreConfig   ScoreConfig @relation(fields: [scoreConfigId], references: [id], onDelete: Cascade)

  @@unique([scoreConfigId, code])
  @@index([scoreConfigId])
}

model MatchScore {
  id             String       @id @default(uuid())
  matchId        String
  allianceId     String
  scoreElementId String
  units          Int
  totalPoints    Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  alliance       Alliance     @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  match          Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  scoreElement   ScoreElement @relation(fields: [scoreElementId], references: [id], onDelete: Cascade)

  @@unique([matchId, allianceId, scoreElementId])
  @@index([matchId])
  @@index([allianceId])
  @@index([scoreElementId])
}


enum UserRole {
  ADMIN
  HEAD_REFEREE
  ALLIANCE_REFEREE
  TEAM_LEADER
  TEAM_MEMBER
  COMMON
}

enum StageType {
  SWISS
  PLAYOFF
  FINAL
}

enum StageStatus {
  ACTIVE
  COMPLETED
}

enum CardType {
  NONE
  YELLOW
  RED
}

enum MatchState {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ERROR
}

enum DisplayState {
  TEAM_LIST
  RANKING
  SCHEDULE
  LIVE
  FINAL_RESULTS
  FINISHED
  CUSTOM_MESSAGE
}

enum MatchType {
  FULL
  TELEOP_ENDGAME
}

enum AllianceColor {
  RED
  BLUE
}

enum MatchRoundType {
  QUALIFICATION
  SWISS
  PLAYOFF
  FINAL
}

enum TimerType {
  AUTO
  TELEOP
  ENDGAME
  FULL_MATCH
}

enum MatchErrorType {
  ROBOT_FAILURE
  FIELD_FAULT
  OTHER
}

enum ElementType {
  COUNTER
  BOOLEAN
  TIMER
}
